#! /usr/bin/env python

from __future__ import absolute_import, print_function, division

import argparse
import os,sys
import datetime
import healpy as hp
import matplotlib
matplotlib.use('Agg')
from gototile import fits
from gototile import skymaptools as smt
from gototile import plottools as pt
from gototile import grid


def pretty_time_delta(seconds):
    seconds = int(seconds)
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    if days > 0:
        return '%dd%dh%dm%ds' % (days, hours, minutes, seconds)
    elif hours > 0:
        return '%dh%dm%ds' % (hours, minutes, seconds)
    elif minutes > 0:
        return '%dm%ds' % (minutes, seconds)
    else:
        return '%ds' % (seconds,)


def parse_command_line():

    description = ("This script creates pointings for selected telescopes, "
                   "with given skymap files.")

    parser = argparse.ArgumentParser(
        description = description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("-i", "--id", default='',
                        help="Name of output files (without extension)")
    parser.add_argument("-p", "--path",default='./', help="Output path")
    parser.add_argument("-t", "--maxt", type=int, default=100,
                        help="Number of tiles to return")
    parser.add_argument("-f", "--maxf", type=float, default=0.95,
                        help="Maximum fraction of visible skymap to tile")
    parser.add_argument("-s", "--scopes", type=int, default=4,
                        help=("Number of telescopes for GOTO configuration, "
                              "4 or 8"))
    parser.add_argument("-g", "--usegals", action="store_true", default=False,
                        help="Use GWGC in tiling/plotting")
    parser.add_argument("-n", "--nightsky", action="store_true", default=False,
                        help="Use nightsky visbility in tiling/plotting")
    parser.add_argument("--geoplot", action="store_true", default=False,
                        help="Plot in geographic coordinates, (lat, lon)")
    parser.add_argument("--plot", action="store_true", default=False,
                        help="Plot in RA-Dec")
    parser.add_argument("--makegrid", action="store_true", default=False,
                        help=("Create fixed grid of tiles on sky. "
                              "WARNING: Can take some time."))
    parser.add_argument("--tiles", default='./tiles/',
                        help=("Location of pre-made fixed grid of tiles "
                              "on sky."))
    parser.add_argument("infiles", help="Space separated input files",
                        nargs='*')

    return parser.parse_args()


def main(args):
    if args.makegrid:
        print("Creating fixed grid for both GOTO4 and GOTO8. "
              "Could take some time...")
        grid.tileallsky(args.tiles)
        return

    if not os.path.exists(args.path):
        os.makedirs(args.path)

    if not args.infiles:
        sys.exit("No input files detected, please provide input skymap.")
    if len(args.infiles) > 1:
        print("Multiple input files detected, outfile argument ignored, "
              "outfile name taken from metadata object id.")
    elif args.id == '':
        print("No output name detected, output taken from "
              "object id metadata.")

    scopename, delns, delew, lat, lon, height = smt.getscopeinfo(args.scopes)

    for infile in args.infiles:
        skymap, metadata = fits.read_sky_map(infile)
        orderin = 'NESTED' if metadata['nest'] else 'RINGED'
        newmap = hp.ud_grade(skymap, nside_out=256, order_in=orderin,
                             order_out='NESTED', power=-2)
        metadata['nest'] = True
        metadata['nside'] = 256
        if len(args.infiles) > 1 or args.id == '':
            objid = metadata['objid']
            objsplit = objid.split(':')
            args.id = objsplit[-1]

        tilefile = "{}_nside256_nestTrue.pgz".format(scopename)
        tilefile = os.path.join(args.tiles, tilefile)
        if not os.path.isfile(tilefile): 
            sys.exit("No existing pre-made tiles found. Please run tileskymap "
                     "with the --makegrid option.")
        alltiles, pixlist = grid.readtiles(tilefile, metadata)

        pointings, tiledmap, allskymap = smt.findtiles(
            newmap, delns, delew, metadata, args.usegals,
            args.nightsky, args.maxf, args.maxt,
            lat, lon, height, alltiles, pixlist)
        
        gwtot = skymap.sum()
        allsky = allskymap.sum()
        print("The total probability visible during the next "
              "observing period is {}".format(gwtot))
        print("This is {}% of the original skymap".format(
            (gwtot/allskymap.sum())*100.))

        outfilename = "{}_{}.txt".format(args.id, scopename)
        outfilename = os.path.join(args.path, outfilename)
        with open(outfilename, 'w') as outfile:
            for pointing in pointings:
                clon, clat, _, prob, gwtot = pointing
                outfile.write("{},{},{},{}\n".format(
                    clon[0], clat[0], prob, gwtot))
                print("{:9.5f}, {:+9.5f}, {:8.6f}, {:8.6f}".format(
                    clon[0], clat[0], prob, gwtot))

        if args.plot or args.geoplot:
            plotfilename = os.path.join(args.path, "{}moll{}.png".format(
                args.id, scopename))
            pt.plotskymapsmoll(tiledmap, pointings, metadata, args.geoplot,
                               args.usegals, scopename, args.id, plotfilename)


if __name__ == '__main__':
    start = datetime.datetime.now()
    args = parse_command_line()
    main(args)
    end = datetime.datetime.now()
    td = end-start
    ts = td.total_seconds()
    print("Time taken to tile skymap: {}".format(pretty_time_delta(ts)))
