#! /usr/bin/env python

from __future__ import absolute_import, print_function, division

import argparse
import os,sys
import datetime
import healpy as hp
import matplotlib
matplotlib.use('Agg')
from astropy.time import Time
from astropy.coordinates import SkyCoord
from astropy import units
from gototile import fits
from gototile import skymaptools as smt
from gototile import plottools as pt
from gototile import grid


NSIDE = 256

def pretty_time_delta(seconds):
    seconds = int(seconds)
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    if days > 0:
        return '%dd%dh%dm%ds' % (days, hours, minutes, seconds)
    elif hours > 0:
        return '%dh%dm%ds' % (hours, minutes, seconds)
    elif minutes > 0:
        return '%dm%ds' % (minutes, seconds)
    else:
        return '%ds' % (seconds,)


def parse_command_line():

    description = ("This script creates pointings for selected telescopes, "
                   "with given skymap files.")

    parser = argparse.ArgumentParser(
        description = description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("-i", "--id", default='',
                        help="Name of output files (without extension)")
    parser.add_argument("-p", "--path",default='./', help="Output path")
    parser.add_argument("-t", "--maxtiles", type=int, default=100,
                        help="Number of tiles to return")
    parser.add_argument("--maxt", type=int, default=100, dest='maxtiles',
                        help=argparse.SUPPRESS)
    parser.add_argument("-f", "--maxf", type=float, default=0.95,
                        help="Maximum fraction of visible skymap to tile")
    parser.add_argument("-s", "--scope", choices=['g4', 'g8', 'swn'],
                        default='g4',
                        help=("Telescope to use. GOTO-4, GOTO-8, "
                              "SuperWASP-North."))
    parser.add_argument("-g", "--usegals", action="store_true", default=False,
                        help="Use GWGC in tiling/plotting")
    parser.add_argument("-n", "--nightsky", action="store_true", default=False,
                        help="Use nightsky visbility in tiling/plotting")
    parser.add_argument("-d", "--date", nargs='?', default='now',
                        help="Set observation date. If not used, defaults to "
                        "the current date.  If given without argument, "
                        "defaults to the trigger date in the input file(s). "
                        "The optional "
                        "argument can be a date-time string that can be parsed "
                        "by astropy.time.Time, such as '2012-12-12T12:12:12'. "
                        "A single number is interpreted as Julian days; use a "
                        "number with 'mjd' appended to specify Modified Julian "
                        "Days.")
    parser.add_argument("--geoplot", action="store_true", default=False,
                        help="Plot in geographic coordinates, (lat, lon)")
    parser.add_argument("--plot", action="store_true", default=False,
                        help="Plot in RA-Dec")
    parser.add_argument("--title", help="Use suppied title in skymap plot.")
    parser.add_argument("--makegrid", action="store_true", default=False,
                        help=("Create fixed grid of tiles on sky. "
                              "WARNING: Can take some time."))
    parser.add_argument("--tiles", default='./tiles/',
                        help=("Location of pre-made fixed grid of tiles "
                              "on sky."))
    parser.add_argument("infiles", help="Space separated input files",
                        nargs='*')
    parser.add_argument("--object", nargs=3, action='append',
                        default=[], help="Overplot an object. "
                        "Requires three values: RA, Dec and an object name.")
    parser.add_argument('--sun', action='store_true',
                        help="Plot the Sun position")
    parser.add_argument('--moon', action='store_true',
                        help="Plot the Moon position")
    return parser.parse_args()


def parse_date(string):
    """Turn a string into an astropy.time.Time date"""

    if string is None:
        return None
    if string is 'now':
        return Time.now()
    if string.lower().endswith('jd'):
        if string.lower().endswith('mjd'):
            return Time(float(string[:-3]), format='mjd', scale='utc')
        return Time(float(string[:-2]), format='jd', scale='utc')
    return Time(string)


def parse_object(args):
    if ':' in args[0] and ':' in args[1]:
        coords = SkyCoord(args[0], args[1], unit=units.degree)
    else:
        try:
            float(args[0]), float(args[1])
        except ValueError:
            coords = SkyCoord(args[0], args[1])
        else:
            coords = SkyCoord(args[0], args[1], unit=units.degree)
    coords.name = args[2]
    return coords


def main(args):
    if args.makegrid:
        tilesdir = args.tiles
        if not os.path.exists(tilesdir):
            os.makedirs(tilesdir)
        print("Creating the fixed grid GOTO-4, GOTO-8 and SuperWASP-N "
              "This could take some time.")
        for scope in (4, 8):
            scopename = "GOTO{}".format(scope)
            filename = "{}_nside{}_nestTrue.pgz".format(scopename, NSIDE)
            path = os.path.join(tilesdir, filename)
            grid.tileallsky(path, scopename, NSIDE)
        scopename = "SuperWASP-N"
        filename = "{}_nside{}_nestTrue.pgz".format(scopename, NSIDE)
        path = os.path.join(tilesdir, filename)
        grid.tileallsky(path, scopename, NSIDE)
        return

    if not os.path.exists(args.path):
        os.makedirs(args.path)

    args.date = parse_date(args.date)
    objects = [parse_object(obj) for obj in args.object]

    if not args.infiles:
        sys.exit("No input files detected, please provide input skymap.")
    if len(args.infiles) > 1:
        print("Multiple input files detected, outfile argument ignored, "
              "outfile name taken from metadata object id.")
    elif args.id == '':
        print("No output name detected, output taken from "
              "object id metadata.")

    names = {'g4': 'GOTO4',
             'g8': 'GOTO8',
             'swn': 'SuperWASP-N'}
    scopename = names[args.scope]
    delns, delew, lat, lon, height = smt.getscopeinfo(scopename)

    for infile in args.infiles:
        skymap, metadata = fits.read_sky_map(infile)
        orderin = 'NESTED' if metadata['nest'] else 'RINGED'
        newmap = hp.ud_grade(skymap, nside_out=NSIDE, order_in=orderin,
                             order_out='NESTED', power=-2)
        metadata['nest'] = True
        metadata['nside'] = NSIDE
        if len(args.infiles) > 1 or args.id == '':
            objid = metadata['objid']
            objsplit = objid.split(':')
            args.id = objsplit[-1]

        tilefile = "{}_nside{}_nestTrue.pgz".format(scopename, NSIDE)
        tilefile = os.path.join(args.tiles, tilefile)
        if not os.path.isfile(tilefile):
            sys.exit("No existing pre-made tiles found. Please run tileskymap "
                     "with the --makegrid option.")
        alltiles, pixlist = grid.readtiles(tilefile, metadata)

        date = metadata['date-det'] if args.date is None else args.date
        pointings, tiledmap, allskymap = smt.findtiles(
            newmap, date, delns, delew, metadata, args.usegals,
            args.nightsky, args.maxf, args.maxtiles,
            lat, lon, height, alltiles, pixlist)

        gwtot = tiledmap.sum()
        allsky = allskymap.sum()
        print("The total probability visible during the next "
              "observing period is {}".format(gwtot))
        print("This is {:5.2f}% of the original skymap".format(
            (gwtot/allskymap.sum())*100.))

        outfilename = "{}_{}.txt".format(args.id, scopename)
        outfilename = os.path.join(args.path, outfilename)
        with open(outfilename, 'w') as outfile:
            for pointing in pointings:
                clon, clat, _, prob, gwobs = pointing
                outfile.write("{},{},{},{}\n".format(
                    clon[0], clat[0], prob, gwobs))
                print("{:9.5f}, {:+9.5f}, {:8.6f}, {:8.6f}".format(
                    clon[0], clat[0], prob, gwobs))

        if args.plot or args.geoplot:
            plotfilename = os.path.join(args.path, "{}moll{}.png".format(
                args.id, scopename))
            pt.plotskymapsmoll(tiledmap, pointings, metadata, args.geoplot,
                               args.usegals, args.nightsky,
                               scopename, args.id, date, plotfilename,
                               title=args.title, objects=objects,
                               sun=args.sun, moon=args.moon)


if __name__ == '__main__':
    start = datetime.datetime.now()
    args = parse_command_line()
    main(args)
    end = datetime.datetime.now()
    td = end-start
    ts = td.total_seconds()
    print("Time taken to tile skymap: {}".format(pretty_time_delta(ts)))
