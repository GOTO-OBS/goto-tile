#! /usr/bin/env python

from __future__ import absolute_import, print_function, division

import argparse
import os
import sys
import tempfile
import datetime
import logging
try:
    import cPickle as pickle
except ImportError:
    import pickle
import numpy as np
import healpy as hp
import matplotlib
matplotlib.use('Agg')
import astropy
from astropy.time import Time, TimeDelta
from astropy.coordinates import SkyCoord, EarthLocation, Angle
from astropy import units
import gototile
from gototile import skymaptools as smt
from gototile import grid
from gototile.skymap import SkyMap
from gototile.settings import NSIDE
from gototile.telescope import (GOTON4, GOTON8, GOTOS4, GOTOS8,
                                SuperWASPN, VISTA, GOTOLS4, GOTOLS8)
from gototile.telescope import build_scope, read_config_file
try:
    FileExistsError
except NameError:
    from gototile.utils import FileExistsError


GWGC_PATH = os.path.join(os.path.dirname(gototile.__file__), 'GWGC.csv')


def pretty_time_delta(seconds):
    seconds = int(seconds)
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    if days > 0:
        return '%dd%dh%dm%ds' % (days, hours, minutes, seconds)
    elif hours > 0:
        return '%dh%dm%ds' % (hours, minutes, seconds)
    elif minutes > 0:
        return '%dm%ds' % (minutes, seconds)
    else:
        return '%ds' % (seconds,)


def parse_args():

    description = ("This script creates pointings for selected telescopes, "
                   "with given skymap files.")

    parser = argparse.ArgumentParser(
        description = description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("skymap", help="Skymap FITS file",)
    parser.add_argument('-o', '--output', help="Output file name")
    parser.add_argument('--pickle',
                        help="Write the pointing to a Python pickle file "
                        "(useful for further processing)")
    #parser.add_argument('--figure', help="Figure file name")
    parser.add_argument('--maxtiles', type=int, default=100,
                        help="Maximum number of tiles to return")
    parser.add_argument('--maxfrac', type=float, default=0.95,
                        help="Maximum fraction of visible skymap to tile")
    parser.add_argument('--minfrac', type=float, default=0.05,
                        help="Minimum fraction of visible skymap required to "
                        "attempt tiling")
    parser.add_argument('-s', '--scope',
                        choices=['gn4', 'gn8', 'gs4', 'gs8', 'gls4', 'gls8',
                                 'swn','vista'],
                        default=[], action='append',
                        help=("Telescope to use. GOTO-4 (default), GOTO-8, "
                              "SuperWASP-North, VISTA."))
    parser.add_argument('-S', '--scopefile',
                        help="YAML file with telescope configuration(s)")
    parser.add_argument('-c', '--catalog', nargs='?', const=True,
                        help="Use a catalog to convolve with; specify as an "
                        "astropy readable table format (default catalog: GWGC)")
    parser.add_argument('--catalog-weight-key',
                        help="Field name to serve as a catalog weight. "
                        "Default is no weighting (spatial density only)")
    parser.add_argument('-n', '--nightsky', action="store_true", default=False,
                        help="Use nightsky visbility in tiling/plotting")
    parser.add_argument('-d', '--date', nargs='?', default='now',
                        help="Set observation date. If not used, defaults to "
                        "the current date.  If given without argument, "
                        "defaults to the trigger date in the input file(s). "
                        "The optional value can be a date-time string that "
                        "can be parsed by astropy.time.Time, such as "
                        "'2012-12-12T12:12:12'. A single number is interpreted "
                        "as Julian days; use a number with 'mjd' appended to "
                        "specify Modified Julian Days.")
    parser.add_argument('-j', '--jobs', nargs='?', default=1,
                        help="Number of processes. If specified without a value, "
                        "use all available processes (cores).")
    parser.add_argument("--geoplot", action='store_true',
                        help="Plot in geographic coordinates (lat, lon), "
                        "instead of the default (RA, Dec)")
    parser.add_argument("--plot", nargs='?', default=True,
                        help="Plot in RA-Dec. Optional output file name")
    parser.add_argument("--title", help="Use suppied title in skymap plot.")
    parser.add_argument("--makegrid", action="store_true",
                        help=("Create fixed grid of tiles on sky. "
                              "WARNING: Can take some time."))
    parser.add_argument('--makegrid-skip', action='store_true',
                        help="Skip existing grid files")
    parser.add_argument("--tiles", default='./tiles/', dest='tiles',
                        help=("File name or base file name of pre-made "
                              "fixed grid of tiles on the sky."))
    parser.add_argument("--object", nargs=3, action='append',
                        default=[], help="Overplot an object. "
                        "Requires three values: RA, Dec and an object name.")
    parser.add_argument('--sun', action='store_true',
                        help="Plot the Sun position")
    parser.add_argument('--moon', action='store_true',
                        help="Plot the Moon position and phase")
    parser.add_argument('--plot-coverage', action='store_true',
                        help="Plot %% coverage as outline thickness")
    parser.add_argument('--plot-delay', action='store_true',
                        help="Plot delay as tile transparency")
    parser.add_argument('--within',
                        help="Only calculate when an area is observable within "
                        "the given amount of time. Default unit is seconds; "
                        "Optionally append a 'd' (day) 'h' (hour), "
                        "'m' (minute) or 's' (second)")
    parser.add_argument('--exptime', type=float,
                        help="Exposure time for a single tile (in seconds)")
    parser.add_argument('--latex',
                        help="Write LaTeX table of pointings")
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-v', '--verbose', action='count', default=0,
                       help="Verbose level")
    group.add_argument('-q', '--quiet', action='store_true',
                       help="Turn off warnings")
    args = parser.parse_args()
    if args.jobs:
        args.jobs = int(args.jobs)
    if args.within:
        try:
            val = float(args.within) * units.second
        except ValueError:
            val = args.within[:-1]
            if args.within[-1] == 'h':
                val = float(val) * units.hour
            elif args.within[-1] == 'm':
                val = float(val) * units.minute
            elif args.within[-1] == 's':
                val = float(val) * units.second
            elif args.within[-1] == 'd':
                val = float(val) * units.day
            else:
                raise
        args.within = TimeDelta(val)
    args.coverage = {'min': args.minfrac, 'max': args.maxfrac}
    if args.catalog is True:
        args.catalog = GWGC_PATH
        if not args.catalog_weight_key:
            args.catalog_weight_key = 'weight'
    args.catalog = {'path': args.catalog, 'key': args.catalog_weight_key}
    if args.plot is True:
        args.plot = os.path.splitext(args.skymap)[0] + '.png'
    return args


def parse_date(string):
    """Turn a string into an astropy.time.Time date"""
    if string is None:
        return None
    if string == 'now':
        return Time.now()
    if string.lower().endswith('jd'):
        if string.lower().endswith('mjd'):
            return Time(float(string[:-3]), format='mjd', scale='utc')
        return Time(float(string[:-2]), format='jd', scale='utc')
    return Time(string)


def parse_object(args):
    if ':' in args[0] and ':' in args[1]:
        coords = SkyCoord(args[0], args[1], unit=(units.hour, units.degree))
    else:
        try:
            float(args[0]), float(args[1])
        except ValueError:
            coords = SkyCoord(args[0], args[1])
        else:
            coords = SkyCoord(args[0], args[1], unit=units.degree)
    coords.name = args[2]
    return coords


def parse_site(site):
    if site is None:
        return site
    try:
        lon = Angle(site[0])
    except units.UnitsError:
        lon = Angle(site[0], unit=units.hour)
    lat = Angle(site[1], unit=units.degree)
    height = float(site[2])
    location = EarthLocation.from_geodetic(lon, lat, height)
    location.name = site[3] if len(site) == 4 else ""
    return location


def set_logging(verbose, quiet=False):
    loglevel = ['WARNING', 'INFO', 'DEBUG'][verbose]
    logging.basicConfig(level=loglevel,
                        format='%(asctime)s [%(levelname)s]: %(message)s',
                        datefmt='%Y-%m-%dT%H:%M:%S')
    astropy.log.setLevel(loglevel)
    if quiet:
        logging.getLogger().setLevel(logging.ERROR)
        astropy.log.setLevel('ERROR')
        astropy.log.disable_warnings_logging()


def main(args):
    set_logging(args.verbose, args.quiet)

    telclasses = {
        'gn4': GOTON4,
        'gn8': GOTON8,
        'gs4': GOTOS4,
        'gs8': GOTOS8,
        'gls4': GOTOLS4,
        'gls8': GOTOLS8,
        'swn': SuperWASPN,
        'vista': VISTA
    }
    if args.makegrid:
        for key, telclass in telclasses.items():
            telescope = telclass()
            try:
                telescope.makegrid(args.tiles)
            except FileExistsError as exc:
                logging.warning(str(exc))
                logging.info("Skipping this grid.")
                logging.info("Remove file if you want to recreate the grid")
        return

    telescopes = []
    for i, scope in enumerate(args.scope):
        telclass = telclasses[scope]
        telescope = telclass()
        telescopes.append(telescope)
    if args.scopefile:
        telconfigs = read_config_file(args.scopefile)
        for config in telconfigs:
            telescope = build_scope(config)
            try:
                telescope.makegrid(args.tiles)
            except FileExistsError as exc:
                logging.warning(str(exc))
                logging.info("Skipping this grid.")
                logging.info("Remove file if you want to recreate the grid")
            telescopes.append(telescope)
    if not telescopes:
        sys.exit("No telescopes given")

    args.date = parse_date(args.date)
    objects = [parse_object(obj) for obj in args.object]

    skymap = SkyMap(args.skymap)
    skymap.regrade(nside=NSIDE)
    date = skymap.header['date-det'] if args.date is None else args.date

    pointings, tiledmap, allskymap = smt.calculate_tiling(
        skymap, telescopes, date=date, coverage=args.coverage,
        maxtiles=args.maxtiles, within=args.within,
        nightsky=args.nightsky, catalog=args.catalog,
        tilespath=args.tiles, njobs=args.jobs, tileduration=args.exptime)
    gwtot = tiledmap.sum()
    allsky = allskymap.sum()
    pointings.meta['comments'] = [
        "Tiling map obtained for {}".format(date.datetime),
        "The total probability visible during the next observing period is {:.3f}".format(gwtot),
        "This is {:5.2f}% of the original skymap".format((gwtot/allsky)*100.)
    ]
    pointings.meta['command'] = " ".join(sys.argv)

    print("\n".join(pointings.meta['comments']))
    print("#     RA       Dec   obs-sky-frac   cum-obs-sky-frac   "
          "tileprob   cum-prob  coverage (%)  telescope  dt (hour)       time",
          end=" ")
    if (len(pointings) and
        np.any([len(sources) > 0 for sources in pointings['sources']])):
        print("# of cat. srcs")
    else:
        print("")
    for pointing in pointings:
        print("{ra:8.3f}  {dec:+8.3f}  {p[prob]:13.6f}  "
              "{p[cumprob]:17.6f}  {p[relprob]:9.6f}  {p[cumrelprob]:9.6f}  "
              "{coverage:12.2f}  {p[telescope]:>9s}  "
              "{dt:10.2f} {p[time].datetime:%Y-%m-%d %H:%M} UT".format(
                  p=pointing, ra=pointing['center'].ra.deg,
                  dec=pointing['center'].dec.deg,
                  coverage=pointing['cumprob']*100,
                  dt=pointing['dt'].jd*24),
              end=' ')
        if len(pointing['sources']):
            print("{:-8d}".format(len(pointing['sources'])))
        else:
            print("")
    if args.output:
        table = pointings[['prob', 'cumprob', 'telescope']].copy()
        table['prob'] = ["{:.5f}".format(100 * prob) for prob in table['prob']]
        table['cumprob'] = ["{:.5f}".format(100*prob) for prob in  table['cumprob']]
        table['ra'] = ["{:.5f}".format(center.ra.deg) for center in pointings['center']]
        table['dec'] = ["{:.5f}".format(center.dec.deg) for center in pointings['center']]
        # %z was added in Python 3.3, and %Z is deprecated
        table['time'] = [time.datetime.strftime('%Y-%m-%dT%H:%M:%S%z')
                         for time in pointings['time']]
        table['dt'] = ["{:.5f}".format(dt.jd) for dt in pointings['dt']]
        columns = ['telescope', 'ra', 'dec', 'time', 'dt', 'prob', 'cumprob']
        if args.catalog['path']:
            table['ncatsources'] = [len(sources) for sources in pointings['sources']]
            columns.append('ncatsources')
        table[columns].write(args.output, format='ascii.ecsv')
    if args.latex:  # Very similar to args.output, but with less
                    # precision (more human readable)
        table = pointings[['prob', 'cumprob', 'telescope']].copy()
        table['prob'] = ["{:.2f}".format(100 * prob) for prob in table['prob']]
        table['cumprob'] = ["{:.2f}".format(100*prob) for prob in  table['cumprob']]
        table['ra'] = ["{:.2f}".format(center.ra.deg) for center in pointings['center']]
        table['dec'] = ["{:.2f}".format(center.dec.deg) for center in pointings['center']]
        table['time'] = [time.datetime.strftime('%Y-%m-%d %H:%M')
                         for time in pointings['time']]
        table['dt'] = ["{:.2f}".format(dt.jd*24) for dt in pointings['dt']]
        table[['telescope', 'ra', 'dec', 'time', 'dt',
               'prob', 'cumprob']].write(args.latex, format='latex')
    if args.pickle:
        with open(args.pickle, 'wb') as outfile:
            pickle.dump(pointings, outfile, protocol=2)

    if args.plot:
        options = dict(sun=args.sun, moon=args.moon,
                       coverage=args.plot_coverage,
                       delay=args.plot_delay)
        skymap.plot(args.plot, telescopes, date, pointings,
                    geoplot=args.geoplot, catalog=args.catalog,
                    nightsky=args.nightsky,
                    title=args.title, objects=objects,
                    options=options)


if __name__ == '__main__':
    main(parse_args())
